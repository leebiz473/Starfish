# docker env

server {
    listen 80;
    server_name ${DOMAIN_NAME} www.${DOMAIN_NAME};

    # Redirect HTTP to HTTPS (optional but recommended)
    return 301 https://$host$request_uri; # Redirect to HTTPS with the requested host
}

server {
    listen 80;
    server_name mailhog.${DOMAIN_NAME};

    location / {
        proxy_pass http://mailhog:8025;  # Forward requests to the MailHog container
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}

server {
    listen 443 ssl;
    server_name ${DOMAIN_NAME} www.${DOMAIN_NAME}; # Both domains

    ssl_certificate /etc/ssl/certs/server.${DOMAIN_NAME}.crt;
    ssl_certificate_key /etc/ssl/certs/secret.${DOMAIN_NAME}.key;

    root /var/www/app/public;
    index index.php index.html;

    location ~ \.php$ {
        fastcgi_pass php-fpm:9000;
        fastcgi_index index.php;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        fastcgi_buffers 16 16k;
        fastcgi_buffer_size 32k;
        #fixes timeouts
        fastcgi_read_timeout 600;
        include fastcgi_params;

        # Enable file uploads, session handling, etc.
        #fastcgi_param PHP_VALUE "upload_max_filesize=50M post_max_size=50M";
        #fastcgi_param PHP_FLAG "display_errors=on";
    }

    # ✅ Handle asset requests with Vite (for development only)
    location / {
        # Proxy API and Laravel pages
        try_files $uri $uri/ /index.php?$query_string;
    }

     # ✅ Allow access to static files served by Vite
    location ~* \.(js|css|map|json|woff2?|ttf|eot|svg|png|jpg|jpeg|gif|ico|webp)$ {
        expires max;
        log_not_found off;
        access_log off;
        add_header Cache-Control "public, max-age=31536000, immutable";
    }

    location ~ /\.ht {
        deny all;
    }
}

# HTTPS server block
server {
    listen 5173 ssl;
    server_name ${DOMAIN_NAME} www.${DOMAIN_NAME};

    # Path to SSL certificates
    ssl_certificate /etc/ssl/certs/server.${DOMAIN_NAME}.crt;
    ssl_certificate_key /etc/ssl/certs/secret.${DOMAIN_NAME}.key;

    # Enable HTTP2
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers 'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-SHA256:RSA-AES128-GCM-SHA256:RSA-AES128-SHA256';

    # Set CORS headers
    add_header Access-Control-Allow-Origin https://${DOMAIN_NAME} always;
    add_header Access-Control-Allow-Methods 'GET, POST, OPTIONS' always;
    add_header Access-Control-Allow-Headers 'Content-Type, Authorization' always;
    add_header Access-Control-Allow-Credentials true always;

    # Handle OPTIONS preflight requests
    #if ($request_method = 'OPTIONS') {
        #add_header Access-Control-Allow-Origin https://${DOMAIN_NAME};
        #add_header Access-Control-Allow-Methods 'GET, POST, OPTIONS' always;
        #add_header Access-Control-Allow-Headers 'Content-Type, Authorization' always;
        #add_header Access-Control-Allow-Credentials true always;
        #return 204;
    #}

    # Proxy pass to Node.js (or your app) running on 5173 with SSL
    location / {
        proxy_pass https://node:5173;  # Replace with your actual backend URL (Node.js running on port 5173)
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}

# HTTP server block
server {
    listen 5173;
    server_name ${DOMAIN_NAME} www.${DOMAIN_NAME};

    # Set CORS headers for non-SSL
    add_header Access-Control-Allow-Origin https://${DOMAIN_NAME} always;
    add_header Access-Control-Allow-Methods 'GET, POST, OPTIONS' always;
    add_header Access-Control-Allow-Headers 'Content-Type, Authorization' always;
    add_header Access-Control-Allow-Credentials true always;

    # Handle OPTIONS preflight requests
    #if ($request_method = 'OPTIONS') {
        #add_header Access-Control-Allow-Origin https://${DOMAIN_NAME};
        #add_header Access-Control-Allow-Methods 'GET, POST, OPTIONS' always;
        #add_header Access-Control-Allow-Headers 'Content-Type, Authorization' always;
        #add_header Access-Control-Allow-Credentials true always;
        #return 204;
    #}

    # Proxy pass to Node.js (or your app) running on 5173 without SSL
    location / {
        proxy_pass http://node:5173;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}